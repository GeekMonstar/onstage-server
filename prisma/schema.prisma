// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
  userId     String   @map("user_id")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AuthCode {
  id        String   @id @default(cuid())
  code      String
  expires   DateTime
  isExpired Boolean  @map("is_expired")
  userId    String   @map("user_id")
  accountId String   @map("account_id")

  @@map("auth_codes")
}

model Artist {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artists")
}

model Host {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  image     String?
  images    String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("hosts")
}

model Post {
  id         String    @id @default(cuid())
  authorType ActorType @map("auhor_type")
  authorId   String    @map("author_id")
  content    String
  images     String[]
  Likes      Like[]
  Comments   Comment[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("posts")
}

model Comment {
  id         String    @id @default(cuid())
  postId     String    @map("post_id")
  authorType ActorType @map("auhor_type")
  authorId   String    @map("author_id")
  content    String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("likes")
}

model Booking {
  id        String        @id @default(cuid())
  hostId    String        @map("host_id")
  artistId  String        @map("artist_id")
  startsAt  DateTime      @map("starts_at")
  endsAt    DateTime      @map("ends_at")
  status    BookingStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("bookings")
}

model Conversation {
  id        String   @id @default(cuid())
  artistId  String   @map("artist_id")
  hostId    String   @map("host_id")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("conversations")
}

model Message {
  id             String    @id @default(cuid())
  conversationId String    @map("conversation_id")
  authorType      ActorType @map("autor_type")
  authorId       String    @map("author_id")
  content        String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("messages")
}

enum Role {
  GOD
  LORD
  SUPERADMIN
  ADMIN
  USER
}

enum BookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  PASSED
}

enum CoversationType {
  PRIVATE
  GROUP
}

enum ActorType {
  ARTIST
  HOST
}
